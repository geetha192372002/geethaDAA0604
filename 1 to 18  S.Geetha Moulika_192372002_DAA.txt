1)
 Sequential Search
Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.
Return the kth positive integer that is missing from this array.
Example 1:
Input: arr = [2,3,4,7,11], k = 5
Output: 9

def find(arr, k):
    arr_set=set(arr)
    missing_count=0
    current_num=1
    while missing_count<k:
        if current_num not in arr_set:
            missing_count+=1
            if missing_count==k:
                return current_num
        current_num+=1

arr=[2,3,4,7,11]
k1=5
print(find(arr1,k1))
Output: 9


2)
def findPeakElement(nums):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2
        
        if (mid == 0 or nums[mid] > nums[mid - 1]) and (mid == len(nums) - 1 or nums[mid] > nums[mid + 1]):
            return mid
        elif mid > 0 and nums[mid - 1] > nums[mid]:
            right = mid - 1
        else:
            left = mid + 1

    return -1

Test cases:
nums = [1, 2, 3, 1]
print(findPeakElement(nums))  
 Output : 2


3)
def strStr(haystack, needle):
    if not needle:
        return 0
    haystack_len = len(haystack)
    needle_len = len(needle)
    for i in range(haystack_len - needle_len + 1):
        if haystack[i:i + needle_len] == needle:
            return i
    return -1

Test cases:
print(strStr("sadbutsad", "sad"))  
 Output : 0
print(strStr("leetcode", "leeto")) 
Output : -1


4)
def findSubstrings(words):
    result = set()
    for i in range(len(words)):
        for j in range(len(words)):
            if i != j and words[i] in words[j]:
                result.add(words[i])
    return list(result)

Test cases:
print(findSubstrings(["mass", "as", "hero", "superhero"]))  
 Output: ["as", "hero"]
print(findSubstrings(["leetcode", "et", "code"]))           
Output: ["et", "code"]
print(findSubstrings(["blue", "green", "bu"]))              
 Output: []


5)
def wordBreak(s, wordDict):
    word_set = set(wordDict)
    dp = [False] * (len(s) + 1)
    dp[0] = True
    
    for i in range(1, len(s) + 1):
        for j in range(i):
            if dp[j] and s[j:i] in word_set:
                dp[i] = True
                break
                
    return dp[len(s)]

 Test cases:
print(wordBreak("leetcode", ["leet", "code"]))        
Output: True
print(wordBreak("applepenapple", ["apple", "pen"]))  
 Output: True
print(wordBreak("catsandog", ["cats", "dog", "sand", "and", "cat"]))  
 Output: False


6)
def wordBreak(s, wordDict):
    word_set = set(wordDict)
    dp = [False] * (len(s) + 1)
    dp[0] = True
    
    for i in range(1, len(s) + 1):
        for j in range(i):
            if dp[j] and s[j:i] in word_set:
                dp[i] = True
                break
                
    return "Yes" if dp[len(s)] else "No"

Test cases:
print(wordBreak("ilike", ["i", "like", "sam", "sung", "samsung", "mobile", "ice", "cream", "icecream", "man", "go", "mango"]))  
 Output : Yes
print(wordBreak("ilikesamsung", ["i", "like", "sam", "sung", "samsung", "mobile", "ice", "cream", "icecream", "man", "go", "mango"]))  
 Output : Yes


7)
def fullJustify(words, maxWidth):
    res, curr, num_of_letters = [], [], 0

    for w in words:
        if num_of_letters + len(w) + len(curr) > maxWidth:
            for i in range(maxWidth - num_of_letters):
                curr[i % (len(curr) - 1 or 1)] += ' '
            res.append(''.join(curr))
            curr, num_of_letters = [], 0
        curr += [w]
        num_of_letters += len(w)

    res.append(' '.join(curr).ljust(maxWidth))
    return res

 Test cases:
print(fullJustify(["This", "is", "an", "example", "of", "text", "justification."], 16))
output :[  "This    is    an",  "example  of text",  "justification.  "]

print(fullJustify(["What", "must", "be", "acknowledgment", "shall", "be"], 16))
output :[  "What   must   be",  "acknowledgment  ",  "shall be        "]

print(fullJustify(["Science", "is", "what", "we", "understand", "well", "enough", "to", "explain", "to", "a", "computer.", "Art", "is", "everything", "else", "we", "do"], 20))
output :[  "Science  is  what we",  "understand      well",  "enough to explain to",  "a  computer.  Art is",  "everything  else  we",  "do                  "]




8)
class WordFilter:
    def _init_(self, words):
        self.prefix_map = {}
        self.suffix_map = {}
        
        for index, word in enumerate(words):
            for i in range(len(word) + 1):
                prefix = word[:i]
                suffix = word[i:]
                if (prefix, suffix) in self.prefix_map:
                    self.prefix_map[(prefix, suffix)] = max(self.prefix_map[(prefix, suffix)], index)
                else:
                    self.prefix_map[(prefix, suffix)] = index

    def f(self, pref, suff):
        return self.prefix_map.get((pref, suff), -1)

 Test case:
word_filter = WordFilter(["apple"])
print(word_filter.f("a", "e"))  
 Output : 0




9)
def uniquePaths(m, n):
    dp = [[1] * n for _ in range(m)]
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i-1][j] + dp[i][j-1]
    return dp[-1][-1]

Test cases:
print(uniquePaths(3, 7))  
Output : 28
print(uniquePaths(3, 2))  
Output : 3




10)
 from collections import Counter

def numIdenticalPairs(nums):
    count = Counter(nums)
    return sum(v * (v - 1) // 2 for v in count.values())

Test cases:
print(numIdenticalPairs([1, 2, 3, 1, 1, 3]))  
 Output : 4
print(numIdenticalPairs([1, 1, 1, 1]))        
 Output : 6
print(numIdenticalPairs([1, 2, 3]))            
Output : 0



11)
def findTheCity(n, edges, distanceThreshold):
    import sys
    INF = sys.maxsize

       dist = [[INF] * n for _ in range(n)]
    for i in range(n):
        dist[i][i] = 0

       for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w

  
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

        min_reachable = n
    best_city = -1
    for i in range(n):
        reachable_count = sum(1 for j in range(n) if dist[i][j] <= distanceThreshold)
        if reachable_count <= min_reachable:
            min_reachable = reachable_count
            best_city = i

    return best_city

Test cases:
print(findTheCity(4, [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]], 4))  
 Outpu t: 3
print(findTheCity(5, [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]], 2))  
 Output : 0




12)
import heapq

def networkDelayTime(times, n, k):
    graph = {i: [] for i in range(1, n + 1)}
    for u, v, w in times:
        graph[u].append((v, w))
    
    min_heap = [(0, k)]
    dist = {i: float('inf') for i in range(1, n + 1)}
    dist[k] = 0
    
    while min_heap:
        time, u = heapq.heappop(min_heap)
        
        if time > dist[u]:
            continue
        
        for v, w in graph[u]:
            if time + w < dist[v]:
                dist[v] = time + w
                heapq.heappush(min_heap, (dist[v], v))
    
    max_time = max(dist.values())
    return max_time if max_time < float('inf') else -1

Test case :
print(networkDelayTime([[2, 1, 1], [2, 3, 1], [3, 4, 1]], 4, 2))  
 Output : 2
print(networkDelayTime([[1, 2, 1]], 2, 1))  
Output : 1
print(networkDelayTime([[1, 2, 1]], 2, 2))  
Output : -1




13)
from collections import deque, defaultdict

def catMouseGame(graph):
    n = len(graph)
    
    # DP table: dp[turns][mouse][cat] = result
    dp = [[[0] * n for _ in range(n)] for _ in range(2 * n)]
    
    # Base cases
    for m in range(n):
        dp[0][m][0] = 1  # Mouse at any node and Cat at hole means Mouse wins
    for c in range(1, n):
        dp[0][0][c] = 2  # Mouse at hole and Cat at any node means Cat wins
    dp[0][0][0] = 0  # Mouse at hole and Cat at hole is a draw (but should not happen)

    def bfs():
        queue = deque()
        for turns in range(2 * n - 1):
            for mouse in range(n):
                for cat in range(n):
                    if dp[turns][mouse][cat] != 0:
                        queue.append((turns, mouse, cat))
        while queue:
            turns, mouse, cat = queue.popleft()
            result = dp[turns][mouse][cat]
            if result == 0:
                continue
            for prev_mouse in graph[mouse]:
                if prev_mouse == cat:
                    continue
                if result == 1:
                    for next_cat in graph[cat]:
                        if next_cat == 0:
                            continue
                        if dp[turns + 1][prev_mouse][next_cat] == 0:
                            dp[turns + 1][prev_mouse][next_cat] = 1
                            queue.append((turns + 1, prev_mouse, next_cat))
                else:
                    all_cat_win = True
                    for next_cat in graph[cat]:
                        if next_cat == 0:
                            continue
                        if dp[turns + 1][prev_mouse][next_cat] != 2:
                            all_cat_win = False
                            if dp[turns + 1][prev_mouse][next_cat] == 0:
                                dp[turns + 1][prev_mouse][next_cat] = 2
                                queue.append((turns + 1, prev_mouse, next_cat))
                    if all_cat_win:
                        dp[turns + 1][prev_mouse][cat] = 2
                        queue.append((turns + 1, prev_mouse, cat))
    
    bfs()
    
    return dp[0][1][2]

Test cases:
print(catMouseGame([[2, 5], [3], [0, 4, 5], [1, 4, 5], [2, 3], [0, 2, 3]]))  
Output : 0
print(catMouseGame([[1, 3], [0], [3], [0, 2]]))  
Output : 1





14)
import heapq
from collections import defaultdict

def maxProbability(n, edges, succProb, start, end):
        graph = defaultdict(list)
    for (u, v), prob in zip(edges, succProb):
        graph[u].append((v, prob))
        graph[v].append((u, prob))
    
     pq = [(-1.0, start)]
    max_prob = [0.0] * n
    max_prob[start] = 1.0
    
    while pq:
        current_prob, u = heapq.heappop(pq)
        current_prob = -current_prob
        
        if u == end:
            return current_prob
        
        for v, prob in graph[u]:
            new_prob = current_prob * prob
            if new_prob > max_prob[v]:
                max_prob[v] = new_prob
                heapq.heappush(pq, (-new_prob, v))
    
    return 0.0

Test cases:
print(maxProbability(3, [[0,1],[1,2],[0,2]], [0.5,0.5,0.2], 0, 2))  
Output: 0.25000
print(maxProbability(3, [[0,1],[1,2],[0,2]], [0.5,0.5,0.3], 0, 2))  
 Output: 0.30000
print(maxProbability(3, [[0,1]], [0.5], 0, 2))  
Output: 0.00000



15)
def find_min_max(arr):
    min_val = float('inf')
    max_val = float('-inf')
    for num in arr:
        if num < min_val:
            min_val = num
        if num > max_val:
            max_val = num
    return min_val, max_val

Test cases:
test_cases = [
    (8, [5, 7, 3, 4, 9, 12, 6, 2]),
    (9, [1, 3, 5, 7, 9, 11, 13, 15, 17]),
    (10, [22, 34, 35, 36, 43, 67, 12, 13, 15, 17])
]

for N, array in test_cases:
    min_val, max_val = find_min_max(array)
    print(f"Min = {min_val}, Max = {max_val}")

output:
Min = 2, Max = 12
Min = 1, Max = 17
Min = 12, Max = 67





16)
 same as 15
def find_min_max(arr):
    min_val = float('inf')
    max_val = float('-inf')
    for num in arr:
        if num < min_val:
            min_val = num
        if num > max_val:
            max_val = num
    return min_val, max_val

Test cases:
test_cases = [
    (8, [5, 7, 3, 4, 9, 12, 6, 2]),
    (9, [1, 3, 5, 7, 9, 11, 13, 15, 17]),
    (10, [22, 34, 35, 36, 43, 67, 12, 13, 15, 17])
]

for N, array in test_cases:
    min_val, max_val = find_min_max(array)
    print(f"Min = {min_val}, Max = {max_val}")

output:
Min = 2, Max = 12
Min = 1, Max = 17
Min = 12, Max = 67





17)
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

Test cases:
test_cases = [
    [31, 23, 35, 27, 11, 21, 15, 28],
    [22, 34, 25, 36, 43, 67, 52, 13, 65, 17]
]

for array in test_cases:
    merge_sort(array)
    print(','.join(map(str, array)))

output:
11,15,21,23,27,28,31,35
13,17,22,25,34,36,43,52,65,67






18)
def merge_sort(arr, count):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half, count)
        merge_sort(right_half, count)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            count[0] += 1
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

Test cases:
test_cases = [
    [12, 4, 78, 23, 45, 67, 89, 1],
    [38, 27, 43, 3, 9, 82, 10]
]

for array in test_cases:
    comparison_count = [0]
    merge_sort(array, comparison_count)
    print(','.join(map(str, array)))
    print("Comparisons:", comparison_count[0])

output:
1,4,12,23,45,67,78,89
Comparisons: 22
3,9,10,27,38,43,82
Comparisons: 13








